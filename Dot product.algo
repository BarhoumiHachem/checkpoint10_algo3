
// function calcule produit scalair de v1 et v2

FUNCTION dot_prod() : FLOAT
VAR
    v1, v2 : ARRAY_OF FLOAT [];
    i : INTEGER;
    ps : FLOAT:=0;
BEGIN
    FOR i FROM 0 TO n-1 DO
        ps = ps + v1[i] * v2[i]
    END_FOR
    IF (ps=0) THEN
        write ("les vecteurs sont orthogonaux")
    ELSE
        write ("leproduit scalaire =", ps)
    END_IF
    END_FOR
    RETURN ps ;
END

// procedure calcule produit scalaire de v1 et v2

PROCEDURE dot_product(v1, v2 : ARRAY_OF FLOAT)
VAR
    v1, v2 : ARRAY_OF FLOAT [];
    i : INTEGER;
    ps : FLOAT=0;
BEGIN
    FOR i FROM 0 TO n-1  DO
        ps = ps + v1[i] * v2[i]
    END_FOR
    IF (ps=0) THEN
        write ("les vecteurs sont orthogonaux")
    ELSE
        write ("leproduit scalaire =", ps)
    END_IF
END



ALGORITHM Dot_product
VAR
    v1, v2 : ARRAY_OF FLOAT [3];
    i , n : INTEGER;
    scalaire : FLOAT:=0;
BEGIN

// read n pairs of given vectors
    REPEAT
        write ("write n pairs of victors");
        read (n);
    UNTIL (n>1)

// remplir les tableau de vecteur
    FOR i FROM 0 TO n-1 DO
        write ("donner l indice du premier vecteur v1");
        read (v1(i));
        write ("donner l indice du deuxieme vecteur v2");
        read (v2(i));
    END_FOR

// procedure calcul p. scalair

    dot_product(v1, v2);

// function calcul p. scalair
    scalaire:= dot_prod(v1, v2);
    write (scalaire);


END